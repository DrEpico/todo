(()=>{"use strict";var e={208:(e,t,n)=>{n.d(t,{A:()=>p});var o=n(354),r=n.n(o),i=n(314),a=n.n(i),c=n(417),l=n.n(c),d=new URL(n(31),n.b),A=a()(r()),s=l()(d);A.push([e.id,`* {\n    color: aliceblue;\n    --primary-color: #000000;\n    --secondary-color: aliceblue;\n    --tertiary-color: rgb(68, 68, 68);\n    --quaternary-color: rgba(224, 224, 224, 0.5);\n} \n\nbody{\n    background-color: var(--primary-color);\n    font-family: Poppins;\n    margin: 0px;\n\n    display: grid;\n    grid-template-columns: max-content 1fr; \n    grid-template-rows: 2em 48px 1fr;\n    grid-template-areas: \n        "sidebar header header header"\n        "sidebar header header header"\n        "sidebar content content content"\n        "sidebar content content content";\n}\n\n#sidebar {\n    grid-area: sidebar;\n    min-width: 250px;\n    border-color: var(--secondary-color);\n    border-width: 1px;\n    border-style: solid;\n    background-color: var(--primary-color);\n    border-top: none;\n    border-left: none;\n    border-bottom: none;\n    padding: 0 0 35px;\n    height: 100vh;\n    margin-right: 10px;\n    min-width: max-content;\n}\n\n/* project tab element */\n.project {\n    display: block;\n    color: var(--tertiary-color);\n    font-size: 16px;\n    color: var(--secondary-color);\n    border-width: 1px;\n    border-style: solid;\n    border-color: var(--secondary-color);\n    padding: 10px 0px 10px 35px;\n    border-right: none;\n    border-left: none;\n    cursor: pointer;\n    transition: background-color 0.3s ease; /* nice little detail */\n}\n\n.project:hover {\n    background-color: var(--tertiary-color);\n}\n\n.content {\n    grid-area: content;\n    display: flex;\n    flex-wrap: wrap;\n}\n\n#title {\n    margin-top: 20px;\n    margin-left: 35px;\n    margin: 20px 35px 20px 35px;\n}\n\n#header {\n    grid-area: header;\n    display: flex;\n    justify-content: flex-end;\n    align-items: center;\n    margin-right: 30px;\n}\n\nselect {\n    font-family: Poppins;\n    font-size: 0.9em;\n    margin-bottom: 15px;\n}\n\nselect#sort {\n    margin: 0px;\n}\n\n/* todo element */\n.box {\n    width: 350px;\n    height: 300px;\n    border: 2px var(--secondary-color) solid;\n    margin: 10px;\n    padding: 20px;\n    /* padding-top: 30px; */\n    position: relative; /* Ensure the plus sign is positioned relative to the .box element */\n    margin-bottom: 20px; /* Adjust as needed */\n    box-sizing: border-box;\n    min-width: 350px;\n    transition: background-color 0.3s ease;\n}\n\n.box.clickable:hover {\n    background-color: var(--quaternary-color); /* Change background color with opacity */\n}\n\n.plus-sign {\n    position: absolute; /* Position the plus sign relative to the .box element */\n    top: 50%; /* Center vertically */\n    left: 50%; /* Center horizontally */\n    transform: translate(-50%, -50%); /* Center the plus sign precisely */\n    font-size: 24px; /* Adjust the size of the plus sign */\n    color: var(--secondary-color); /* Set the color of the plus sign */\n    cursor: pointer; /* Change cursor to indicate it's clickable */\n    padding: 70px 200px;\n}\n\ninput {\n    background-color: rgba(0, 0, 0, 0);\n    border-top: none;\n    border-right: none;\n    border-left: none;\n    margin-bottom: 15px;\n}\n\ninput#planned, input#due {\n    margin-bottom: 19px;\n}\n\ninput:focus {\n    outline: none;\n    border: none;\n}\n\n#priority {\n    background-color: var(--primary-color);\n    border-radius: 0%;\n}\n\n#sort {\n    background-color: var(--primary-color);\n    margin-bottom: 19px;\n    border-radius: 0%;\n}\n\nbutton {\n    margin-top: 9px;\n    background-color: rgba(0, 0, 0, 0);\n    border-color: var(--secondary-color);\n    border-radius: 3px;\n}\n\nbutton:focus {\n    background-color: var(--primary-color);\n    border-color: var(--secondary-color);\n}\n\n/* Target the date picker icon specifically */\ninput[type="date"]::-webkit-calendar-picker-indicator {\n    background-color: var(--secondary-color); /* Set the background color of the date picker icon to transparent */\n    /* You can also set other properties like width, height, etc. to customize the appearance of the icon */\n}\n\n.deleteBtn {\n    position: absolute;\n    bottom: 25px;\n    right: 35px;\n}\n\ninput.projName {\n    margin: 0px;\n}\n\nbutton.addBtn { \n    margin: 0px;\n}\n\n#activeTab {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    background-color: var(--secondary-color);\n    color: #333;\n    text-align: center; /* Horizontally center the button */\n}\n\n#deleteBtn {\n    margin: 0px;\n    background: url(${s}) no-repeat center center;\n    background-size: contain; /* Ensure the image scales appropriately */\n    width: 23.636px; /* Set the desired width */\n    height: 23.636px; /* Set the desired height */\n    border-width: 2px;\n    border-style: solid;\n    border-color: var(--primary-color);\n    border-radius: 15%;\n    margin-right: 13px;\n}\n\n`,"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,gBAAgB;IAChB,wBAAwB;IACxB,4BAA4B;IAC5B,iCAAiC;IACjC,4CAA4C;AAChD;;AAEA;IACI,sCAAsC;IACtC,oBAAoB;IACpB,WAAW;;IAEX,aAAa;IACb,sCAAsC;IACtC,gCAAgC;IAChC;;;;yCAIqC;AACzC;;AAEA;IACI,kBAAkB;IAClB,gBAAgB;IAChB,oCAAoC;IACpC,iBAAiB;IACjB,mBAAmB;IACnB,sCAAsC;IACtC,gBAAgB;IAChB,iBAAiB;IACjB,mBAAmB;IACnB,iBAAiB;IACjB,aAAa;IACb,kBAAkB;IAClB,sBAAsB;AAC1B;;AAEA,wBAAwB;AACxB;IACI,cAAc;IACd,4BAA4B;IAC5B,eAAe;IACf,6BAA6B;IAC7B,iBAAiB;IACjB,mBAAmB;IACnB,oCAAoC;IACpC,2BAA2B;IAC3B,kBAAkB;IAClB,iBAAiB;IACjB,eAAe;IACf,sCAAsC,EAAE,uBAAuB;AACnE;;AAEA;IACI,uCAAuC;AAC3C;;AAEA;IACI,kBAAkB;IAClB,aAAa;IACb,eAAe;AACnB;;AAEA;IACI,gBAAgB;IAChB,iBAAiB;IACjB,2BAA2B;AAC/B;;AAEA;IACI,iBAAiB;IACjB,aAAa;IACb,yBAAyB;IACzB,mBAAmB;IACnB,kBAAkB;AACtB;;AAEA;IACI,oBAAoB;IACpB,gBAAgB;IAChB,mBAAmB;AACvB;;AAEA;IACI,WAAW;AACf;;AAEA,iBAAiB;AACjB;IACI,YAAY;IACZ,aAAa;IACb,wCAAwC;IACxC,YAAY;IACZ,aAAa;IACb,uBAAuB;IACvB,kBAAkB,EAAE,oEAAoE;IACxF,mBAAmB,EAAE,qBAAqB;IAC1C,sBAAsB;IACtB,gBAAgB;IAChB,sCAAsC;AAC1C;;AAEA;IACI,yCAAyC,EAAE,yCAAyC;AACxF;;AAEA;IACI,kBAAkB,EAAE,wDAAwD;IAC5E,QAAQ,EAAE,sBAAsB;IAChC,SAAS,EAAE,wBAAwB;IACnC,gCAAgC,EAAE,mCAAmC;IACrE,eAAe,EAAE,qCAAqC;IACtD,6BAA6B,EAAE,mCAAmC;IAClE,eAAe,EAAE,6CAA6C;IAC9D,mBAAmB;AACvB;;AAEA;IACI,kCAAkC;IAClC,gBAAgB;IAChB,kBAAkB;IAClB,iBAAiB;IACjB,mBAAmB;AACvB;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,aAAa;IACb,YAAY;AAChB;;AAEA;IACI,sCAAsC;IACtC,iBAAiB;AACrB;;AAEA;IACI,sCAAsC;IACtC,mBAAmB;IACnB,iBAAiB;AACrB;;AAEA;IACI,eAAe;IACf,kCAAkC;IAClC,oCAAoC;IACpC,kBAAkB;AACtB;;AAEA;IACI,sCAAsC;IACtC,oCAAoC;AACxC;;AAEA,6CAA6C;AAC7C;IACI,wCAAwC,EAAE,oEAAoE;IAC9G,uGAAuG;AAC3G;;AAEA;IACI,kBAAkB;IAClB,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,aAAa;IACb,8BAA8B;IAC9B,mBAAmB;IACnB,wCAAwC;IACxC,WAAW;IACX,kBAAkB,EAAE,mCAAmC;AAC3D;;AAEA;IACI,WAAW;IACX,2EAAoE;IACpE,wBAAwB,EAAE,0CAA0C;IACpE,eAAe,EAAE,0BAA0B;IAC3C,gBAAgB,EAAE,2BAA2B;IAC7C,iBAAiB;IACjB,mBAAmB;IACnB,kCAAkC;IAClC,kBAAkB;IAClB,kBAAkB;AACtB",sourcesContent:['* {\n    color: aliceblue;\n    --primary-color: #000000;\n    --secondary-color: aliceblue;\n    --tertiary-color: rgb(68, 68, 68);\n    --quaternary-color: rgba(224, 224, 224, 0.5);\n} \n\nbody{\n    background-color: var(--primary-color);\n    font-family: Poppins;\n    margin: 0px;\n\n    display: grid;\n    grid-template-columns: max-content 1fr; \n    grid-template-rows: 2em 48px 1fr;\n    grid-template-areas: \n        "sidebar header header header"\n        "sidebar header header header"\n        "sidebar content content content"\n        "sidebar content content content";\n}\n\n#sidebar {\n    grid-area: sidebar;\n    min-width: 250px;\n    border-color: var(--secondary-color);\n    border-width: 1px;\n    border-style: solid;\n    background-color: var(--primary-color);\n    border-top: none;\n    border-left: none;\n    border-bottom: none;\n    padding: 0 0 35px;\n    height: 100vh;\n    margin-right: 10px;\n    min-width: max-content;\n}\n\n/* project tab element */\n.project {\n    display: block;\n    color: var(--tertiary-color);\n    font-size: 16px;\n    color: var(--secondary-color);\n    border-width: 1px;\n    border-style: solid;\n    border-color: var(--secondary-color);\n    padding: 10px 0px 10px 35px;\n    border-right: none;\n    border-left: none;\n    cursor: pointer;\n    transition: background-color 0.3s ease; /* nice little detail */\n}\n\n.project:hover {\n    background-color: var(--tertiary-color);\n}\n\n.content {\n    grid-area: content;\n    display: flex;\n    flex-wrap: wrap;\n}\n\n#title {\n    margin-top: 20px;\n    margin-left: 35px;\n    margin: 20px 35px 20px 35px;\n}\n\n#header {\n    grid-area: header;\n    display: flex;\n    justify-content: flex-end;\n    align-items: center;\n    margin-right: 30px;\n}\n\nselect {\n    font-family: Poppins;\n    font-size: 0.9em;\n    margin-bottom: 15px;\n}\n\nselect#sort {\n    margin: 0px;\n}\n\n/* todo element */\n.box {\n    width: 350px;\n    height: 300px;\n    border: 2px var(--secondary-color) solid;\n    margin: 10px;\n    padding: 20px;\n    /* padding-top: 30px; */\n    position: relative; /* Ensure the plus sign is positioned relative to the .box element */\n    margin-bottom: 20px; /* Adjust as needed */\n    box-sizing: border-box;\n    min-width: 350px;\n    transition: background-color 0.3s ease;\n}\n\n.box.clickable:hover {\n    background-color: var(--quaternary-color); /* Change background color with opacity */\n}\n\n.plus-sign {\n    position: absolute; /* Position the plus sign relative to the .box element */\n    top: 50%; /* Center vertically */\n    left: 50%; /* Center horizontally */\n    transform: translate(-50%, -50%); /* Center the plus sign precisely */\n    font-size: 24px; /* Adjust the size of the plus sign */\n    color: var(--secondary-color); /* Set the color of the plus sign */\n    cursor: pointer; /* Change cursor to indicate it\'s clickable */\n    padding: 70px 200px;\n}\n\ninput {\n    background-color: rgba(0, 0, 0, 0);\n    border-top: none;\n    border-right: none;\n    border-left: none;\n    margin-bottom: 15px;\n}\n\ninput#planned, input#due {\n    margin-bottom: 19px;\n}\n\ninput:focus {\n    outline: none;\n    border: none;\n}\n\n#priority {\n    background-color: var(--primary-color);\n    border-radius: 0%;\n}\n\n#sort {\n    background-color: var(--primary-color);\n    margin-bottom: 19px;\n    border-radius: 0%;\n}\n\nbutton {\n    margin-top: 9px;\n    background-color: rgba(0, 0, 0, 0);\n    border-color: var(--secondary-color);\n    border-radius: 3px;\n}\n\nbutton:focus {\n    background-color: var(--primary-color);\n    border-color: var(--secondary-color);\n}\n\n/* Target the date picker icon specifically */\ninput[type="date"]::-webkit-calendar-picker-indicator {\n    background-color: var(--secondary-color); /* Set the background color of the date picker icon to transparent */\n    /* You can also set other properties like width, height, etc. to customize the appearance of the icon */\n}\n\n.deleteBtn {\n    position: absolute;\n    bottom: 25px;\n    right: 35px;\n}\n\ninput.projName {\n    margin: 0px;\n}\n\nbutton.addBtn { \n    margin: 0px;\n}\n\n#activeTab {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    background-color: var(--secondary-color);\n    color: #333;\n    text-align: center; /* Horizontally center the button */\n}\n\n#deleteBtn {\n    margin: 0px;\n    background: url(\'./images/deleteButton.png\') no-repeat center center;\n    background-size: contain; /* Ensure the image scales appropriately */\n    width: 23.636px; /* Set the desired width */\n    height: 23.636px; /* Set the desired height */\n    border-width: 2px;\n    border-style: solid;\n    border-color: var(--primary-color);\n    border-radius: 15%;\n    margin-right: 13px;\n}\n\n'],sourceRoot:""}]);const p=A},314:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",o=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),o&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),o&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,o,r,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(o)for(var c=0;c<this.length;c++){var l=this[c][0];null!=l&&(a[l]=!0)}for(var d=0;d<e.length;d++){var A=[].concat(e[d]);o&&a[A[0]]||(void 0!==i&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=i),n&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=n):A[2]=n),r&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=r):A[4]="".concat(r)),t.push(A))}},t}},417:e=>{e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},354:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(r," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},72:e=>{var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var i={},a=[],c=0;c<e.length;c++){var l=e[c],d=o.base?l[0]+o.base:l[0],A=i[d]||0,s="".concat(d," ").concat(A);i[d]=A+1;var p=n(s),u={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)t[p].references++,t[p].updater(u);else{var C=r(u,o);o.byIndex=c,t.splice(c,0,{identifier:s,updater:C,references:1})}a.push(s)}return a}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var i=o(e=e||[],r=r||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var c=n(i[a]);t[c].references--}for(var l=o(e,r),d=0;d<i.length;d++){var A=n(i[d]);0===t[A].references&&(t[A].updater(),t.splice(A,1))}i=l}}},659:e=>{var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},540:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},56:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,r&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(o,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},113:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},31:(e,t,n)=>{e.exports=n.p+"458b7e3d2fd90475111f.png"}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var i=t[o]={id:o,exports:{}};return e[o](i,i.exports,n),i.exports}n.m=e,n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var o=t.getElementsByTagName("script");if(o.length)for(var r=o.length-1;r>-1&&(!e||!/^http(s?):/.test(e));)e=o[r--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n.b=document.baseURI||self.location.href,n.nc=void 0,(()=>{var e=n(72),t=n.n(e),o=n(825),r=n.n(o),i=n(659),a=n.n(i),c=n(56),l=n.n(c),d=n(540),A=n.n(d),s=n(113),p=n.n(s),u=n(208),C={};function m(e,t=[]){this.title=e,this.todos=t}C.styleTagTransform=p(),C.setAttributes=l(),C.insert=a().bind(null,"head"),C.domAPI=r(),C.insertStyleElement=A(),t()(u.A,C),u.A&&u.A.locals&&u.A.locals;const b=[];function h(e){return b.find((t=>t.title===e))}function g(e,t,n,o,r){this.title=e,this.description=t,this.dueDate=n,this.priority=o,this.checklist=r}function f(e){console.log("handleSortChange called");const t=e.target.value;"date"===t?function(){console.log("sortByDate called");let e=h(document.querySelector("#activeTab").textContent);e&&(console.log("project exists"),e.todos.sort(((e,t)=>new Date(e.dueDate)-new Date(t.dueDate))),S(e))}():"priority"===t&&function(){console.log("sortByPriority called");let e=h(document.querySelector("#activeTab").textContent);e&&(console.log("project exists"),e.todos.sort(((e,t)=>B(t.priority)-B(e.priority))),S(e))}()}function B(e){switch(console.log("priorityValue called"),e){case"low":return 1;case"medium":return 2;case"high":return 3;default:return 0}}const x=document.querySelector("body"),y=document.createElement("div");function v(){const e=document.createElement("div");e.classList.add("box"),e.textContent="Click me to add todo";const t=document.createElement("div");return t.textContent="+",t.classList.add("plus-sign"),e.appendChild(t),{box:e,plusSign:t}}function I(e){e.textContent="",e.classList.remove("clickable"),function(e){let t=document.createElement("form"),n=document.createElement("label");n.setAttribute("for","title"),n.textContent="Todo:         ";let o=document.createElement("input");o.setAttribute("type","text"),o.setAttribute("id","title"),o.setAttribute("name","title"),o.setAttribute("required","");let r=document.createElement("label");r.setAttribute("for","description"),r.textContent="Description:    ";let i=document.createElement("input");i.setAttribute("type","text"),i.setAttribute("id","description"),i.setAttribute("name","description");let a=document.createElement("label");a.setAttribute("for","dueDate"),a.textContent="Due:        ";let c=document.createElement("input");c.setAttribute("type","date"),c.setAttribute("id","dueDate"),c.setAttribute("name","dueDate");let l=document.createElement("label");l.setAttribute("for","priority"),l.textContent="Priority: ";let d=document.createElement("select");d.setAttribute("id","priority"),d.setAttribute("name","priority");["Low","Medium","High"].forEach((e=>{let t=document.createElement("option");t.value=e.toLowerCase(),t.textContent=e,d.appendChild(t)}));let A=document.createElement("label");A.textContent="Status: ";let s=document.createElement("input");s.setAttribute("type","radio"),s.setAttribute("id","planned"),s.setAttribute("name","status"),s.setAttribute("value","planned");let p=document.createElement("label");p.setAttribute("for","planned"),p.textContent="Planned";let u=document.createElement("input");u.setAttribute("type","radio"),u.setAttribute("id","due"),u.setAttribute("name","status"),u.setAttribute("value","due");let C=document.createElement("label");C.setAttribute("for","due"),C.textContent="Due";let m=document.createElement("button");m.setAttribute("id","createBtn"),m.textContent="Create",m.setAttribute("type","submit"),m.addEventListener("click",(function(n){if(n.preventDefault(),""===o.value.trim())return void alert("Title is required!");const r=new g(o.value,i.value,c.value,d.value,s.checked?s.value:u.value);console.log(r),k(),t.remove();let a=document.querySelector("#activeTab").textContent;console.log(a);let l=h(a);console.log(l),E(e,r,l),function(e,t){const n=b.findIndex((e=>e.title===t));-1!==n?(b[n].todos.push(e),console.log("Todo pushed to project:",t)):console.log("Project not found:",t)}(r,a)})),t.appendChild(n),t.appendChild(o),t.appendChild(document.createElement("br")),t.appendChild(r),t.appendChild(i),t.appendChild(document.createElement("br")),t.appendChild(l),t.appendChild(d),t.appendChild(document.createElement("br")),t.appendChild(A),t.appendChild(s),t.appendChild(p),t.appendChild(u),t.appendChild(C),t.appendChild(document.createElement("br")),t.appendChild(a),t.appendChild(c),t.appendChild(document.createElement("br")),t.appendChild(m),e.appendChild(t)}(e)}function E(e,t,n){const o=document.createElement("h2");o.textContent=t.title;const r=document.createElement("p");r.textContent=`Description: ${t.description}`;const i=document.createElement("p");i.textContent=`Due Date: ${t.dueDate}`;const a=document.createElement("p");a.textContent=`Priority: ${t.priority}`;const c=document.createElement("p");"planned"===t.checklist?c.textContent="Status: Planned":"due"===t.checklist?c.textContent="Status: Due":c.textContent="Status: error";let l=document.createElement("button");l.setAttribute("class","deleteBtn"),l.textContent="Done",l.addEventListener("click",(function(){!function(e,t,n){console.log(typeof n),console.log("project:"+n);let o=n.todos.indexOf(e);-1!==o?n.todos.splice(o,1):console.log("Error while splicing todos array"),t.remove()}(t,e,n)})),e.appendChild(l),e.appendChild(o),e.appendChild(r),e.appendChild(a),e.appendChild(c),e.appendChild(i)}function k(){const{box:e,plusSign:t}=v();return e.classList.add("clickable"),t.addEventListener("click",(function(){I(e)})),y.appendChild(e),e}function w(){let e=document.getElementById("activeTab");if(e){e.removeAttribute("id");let t=document.querySelector("#deleteBtn");t&&t.remove()}}function j(e){e.setAttribute("id","activeTab");let t=document.createElement("button");t.setAttribute("id","deleteBtn"),function(e,t){e.addEventListener("click",(function(e){e.stopPropagation();let n=t.textContent.trim();confirm(`Are you sure you want to delete the project "${n}"?`)&&function(e,t){let n=h(e),o=b.indexOf(n);-1!==o?b.splice(o,1):console.log("Error while splicing todos array"),t.remove()}(n,t)}))}(t,e),e.appendChild(t)}function S(e){D(),e.title;let t=e.todos;for(let n of t){let t=k();t.textContent="",t.classList.remove("clickable"),E(t,n,e)}k(),console.log(t)}function D(){for(;y.firstChild;)y.removeChild(y.firstChild)}let P=["#222831","#393E46","#00ADB5","#EEEEEE"];function T(e,t){document.querySelector(":root").style.setProperty(e,t)}function L(){T("--primary-color",`${P[0]}`),T("--secondary-color",`${P[1]}`),T("--tertiary-color",`${P[2]}`),T("--quaternary-color",`${P[3]}`)}(()=>{console.log("Called LoadBlankProject - Creating a blank project array...");let e=[];console.log("Pushing the title name of the project to the project array...");e.push({projectTitle:"Default Project"}),console.log(e)})(),function(){let e=document.createElement("div");e.setAttribute("id","sidebar"),x.appendChild(e);let t=document.createElement("h1");t.setAttribute("id","title"),e.appendChild(t),t.textContent="Todo list app";let n=document.createElement("span");n.setAttribute("class","project"),n.setAttribute("id","activeTab"),n.textContent="Daily",e.appendChild(n);let o=document.createElement("span");o.setAttribute("class","project"),o.textContent="New project",e.appendChild(o),document.getElementById("sidebar").addEventListener("click",(function(e){let t=e.target;if(t.classList.contains("project")){let e=t.textContent.trim();if("New project"===e)console.log(e),function(e){let t=e;t.textContent="";let n=document.createElement("input");n.setAttribute("type","text"),n.setAttribute("class","projName"),n.setAttribute("name","projName"),n.setAttribute("required","");let o=document.createElement("button");o.textContent="Confirm",o.setAttribute("class","addBtn"),t.appendChild(n),t.appendChild(o),o.addEventListener("click",(function(e){e.stopPropagation();let o=n.value.trim();o?(D(),k(),w(),t.textContent=o,j(t),function(){let e=document.querySelector("#sidebar"),t=document.createElement("span");t.setAttribute("class","project"),t.textContent="New project",e.appendChild(t)}(),function(e){const t=new m(e);b.push(t),console.log("New project created:",e)}(o)):alert("Project name cannot be empty.")}))}(t);else if(""===e);else if("Confirm"===e);else{console.log(e),w(),j(t);let n=h(e);n?(console.log(typeof n),console.log(n),function(e){e&&Array.isArray(e.todos)?(console.log("Project clicked:",e.title),e.todos.forEach((e=>{console.log("Title:",e.title),console.log("Description:",e.description),console.log("Due Date:",e.dueDate),console.log("Priority:",e.priority),console.log("Checklist:",e.checklist),console.log("------------------------------------------")}))):console.log("Invalid project or todos not found.")}(n),S(n)):console.log("Project not found")}}})),function(){let e=new m("Daily");b.push(e)}()}(),function(){let e=document.createElement("div");e.setAttribute("id","header");let t=document.createElement("div");t.setAttribute("id","sortByDiv");let n=document.createElement("label");n.setAttribute("for","sort"),n.textContent="Sort by: ";let o=document.createElement("select");o.setAttribute("id","sort"),o.setAttribute("name","sort"),["Priority","Date"].forEach((e=>{let t=document.createElement("option");t.value=e.toLowerCase(),t.textContent=e,o.appendChild(t)})),o.addEventListener("change",f),t.appendChild(n),t.appendChild(o),e.appendChild(t),x.appendChild(e);let r=document.createElement("button");r.textContent="Change colour pallet",e.appendChild(r),r.addEventListener("click",L)}(),y.setAttribute("class","content"),x.appendChild(y),(()=>{const{box:e,plusSign:t}=v();e.classList.add("clickable"),t.addEventListener("click",(function(){I(e)})),y.appendChild(e)})(),console.log(undefined)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,