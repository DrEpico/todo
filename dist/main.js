(()=>{"use strict";var e={208:(e,t,n)=>{n.d(t,{A:()=>c});var o=n(354),r=n.n(o),i=n(314),a=n.n(i)()(r());a.push([e.id,"* {\n    color: aliceblue;\n}\n\nbody{\n    font-family: Poppins;\n}\n\n.background {\n    background-color: black;\n}\n\n.content {\n    display: flex;\n    flex-wrap: wrap;\n}\n\n.box {\n    width: calc(45% - 10px);\n    height: 300px;\n    border: 2px white solid;\n    margin: 10px;\n    padding: 20px;\n    position: relative; /* Ensure the plus sign is positioned relative to the .box element */\n    margin-bottom: 20px; /* Adjust as needed */\n    box-sizing: border-box;\n}\n\n.box.clickable:hover {\n    background-color: rgba(224, 224, 224, 0.5); /* Change background color with opacity */\n}\n\n.plus-sign {\n    position: absolute; /* Position the plus sign relative to the .box element */\n    top: 50%; /* Center vertically */\n    left: 50%; /* Center horizontally */\n    transform: translate(-50%, -50%); /* Center the plus sign precisely */\n    font-size: 24px; /* Adjust the size of the plus sign */\n    color: white; /* Set the color of the plus sign */\n    cursor: pointer; /* Change cursor to indicate it's clickable */\n    padding: 70px 200px;\n}\n\ninput {\n    background-color: rgba(0, 0, 0, 0);\n    border-color: rgba(0, 0, 0, 0);\n    margin-bottom: 10px;\n}\n\ninput:focus {\n    outline: none;\n    border: none;\n}\n\nbutton {\n    background-color: rgba(0, 0, 0, 0);\n    border-color: white;\n}\n\nbutton:focus {\n    background-color: rgba(0, 0, 0, 0);\n    border-color: white;\n}\n\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,gBAAgB;AACpB;;AAEA;IACI,oBAAoB;AACxB;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,aAAa;IACb,eAAe;AACnB;;AAEA;IACI,uBAAuB;IACvB,aAAa;IACb,uBAAuB;IACvB,YAAY;IACZ,aAAa;IACb,kBAAkB,EAAE,oEAAoE;IACxF,mBAAmB,EAAE,qBAAqB;IAC1C,sBAAsB;AAC1B;;AAEA;IACI,0CAA0C,EAAE,yCAAyC;AACzF;;AAEA;IACI,kBAAkB,EAAE,wDAAwD;IAC5E,QAAQ,EAAE,sBAAsB;IAChC,SAAS,EAAE,wBAAwB;IACnC,gCAAgC,EAAE,mCAAmC;IACrE,eAAe,EAAE,qCAAqC;IACtD,YAAY,EAAE,mCAAmC;IACjD,eAAe,EAAE,6CAA6C;IAC9D,mBAAmB;AACvB;;AAEA;IACI,kCAAkC;IAClC,8BAA8B;IAC9B,mBAAmB;AACvB;;AAEA;IACI,aAAa;IACb,YAAY;AAChB;;AAEA;IACI,kCAAkC;IAClC,mBAAmB;AACvB;;AAEA;IACI,kCAAkC;IAClC,mBAAmB;AACvB",sourcesContent:["* {\n    color: aliceblue;\n}\n\nbody{\n    font-family: Poppins;\n}\n\n.background {\n    background-color: black;\n}\n\n.content {\n    display: flex;\n    flex-wrap: wrap;\n}\n\n.box {\n    width: calc(45% - 10px);\n    height: 300px;\n    border: 2px white solid;\n    margin: 10px;\n    padding: 20px;\n    position: relative; /* Ensure the plus sign is positioned relative to the .box element */\n    margin-bottom: 20px; /* Adjust as needed */\n    box-sizing: border-box;\n}\n\n.box.clickable:hover {\n    background-color: rgba(224, 224, 224, 0.5); /* Change background color with opacity */\n}\n\n.plus-sign {\n    position: absolute; /* Position the plus sign relative to the .box element */\n    top: 50%; /* Center vertically */\n    left: 50%; /* Center horizontally */\n    transform: translate(-50%, -50%); /* Center the plus sign precisely */\n    font-size: 24px; /* Adjust the size of the plus sign */\n    color: white; /* Set the color of the plus sign */\n    cursor: pointer; /* Change cursor to indicate it's clickable */\n    padding: 70px 200px;\n}\n\ninput {\n    background-color: rgba(0, 0, 0, 0);\n    border-color: rgba(0, 0, 0, 0);\n    margin-bottom: 10px;\n}\n\ninput:focus {\n    outline: none;\n    border: none;\n}\n\nbutton {\n    background-color: rgba(0, 0, 0, 0);\n    border-color: white;\n}\n\nbutton:focus {\n    background-color: rgba(0, 0, 0, 0);\n    border-color: white;\n}\n\n"],sourceRoot:""}]);const c=a},314:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",o=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),o&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),o&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,o,r,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(o)for(var c=0;c<this.length;c++){var l=this[c][0];null!=l&&(a[l]=!0)}for(var s=0;s<e.length;s++){var u=[].concat(e[s]);o&&a[u[0]]||(void 0!==i&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=i),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),r&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=r):u[4]="".concat(r)),t.push(u))}},t}},354:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(r," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},72:e=>{var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var i={},a=[],c=0;c<e.length;c++){var l=e[c],s=o.base?l[0]+o.base:l[0],u=i[s]||0,d="".concat(s," ").concat(u);i[s]=u+1;var p=n(d),A={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)t[p].references++,t[p].updater(A);else{var b=r(A,o);o.byIndex=c,t.splice(c,0,{identifier:d,updater:b,references:1})}a.push(d)}return a}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var i=o(e=e||[],r=r||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var c=n(i[a]);t[c].references--}for(var l=o(e,r),s=0;s<i.length;s++){var u=n(i[s]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}i=l}}},659:e=>{var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},540:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},56:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,r&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(o,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},113:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var i=t[o]={id:o,exports:{}};return e[o](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{var e=n(72),t=n.n(e),o=n(825),r=n.n(o),i=n(659),a=n.n(i),c=n(56),l=n.n(c),s=n(540),u=n.n(s),d=n(113),p=n.n(d),A=n(208),b={};function C(e,t,n,o,r){this.title=e,this.description=t,this.dueDate=n,this.priority=o,this.checklist=r}b.styleTagTransform=p(),b.setAttributes=l(),b.insert=a().bind(null,"head"),b.domAPI=r(),b.insertStyleElement=u(),t()(A.A,b),A.A&&A.A.locals&&A.A.locals;let m=[];function h(e){let t=new C;return m.push(t),console.log(t),t}function f(){const e=document.createElement("div");e.classList.add("box"),e.textContent="Click me to add todo";const t=document.createElement("div");return t.textContent="+",t.classList.add("plus-sign"),e.appendChild(t),{box:e,plusSign:t}}function g(e,t){e.textContent="",e.classList.remove("clickable"),function(e){let t=document.createElement("form"),n=document.createElement("label");n.setAttribute("for","title"),n.textContent="Todo:         ";let o=document.createElement("input");o.setAttribute("type","text"),o.setAttribute("id","title"),o.setAttribute("name","title");let r=document.createElement("label");r.setAttribute("for","description"),r.textContent="Description:    ";let i=document.createElement("input");i.setAttribute("type","text"),i.setAttribute("id","description"),i.setAttribute("name","description");let a=document.createElement("label");a.setAttribute("for","dueDate"),a.textContent="Due:        ";let c=document.createElement("input");c.setAttribute("type","date"),c.setAttribute("id","dueDate"),c.setAttribute("name","dueDate");let l=document.createElement("label");l.setAttribute("for","priority"),l.textContent="Priority: ";let s=document.createElement("input");s.setAttribute("type","text"),s.setAttribute("id","priority"),s.setAttribute("name","priority");let u=document.createElement("label");u.setAttribute("for","checklis"),u.textContent="Due : Done";let d=document.createElement("input");d.setAttribute("type","text"),d.setAttribute("id","checklist"),d.setAttribute("name","checklist");let p=document.createElement("button");p.setAttribute("id","createBtn"),p.textContent="Create",p.addEventListener("click",(function(n){n.preventDefault();const r=new C(o.value,i.value,c.value,s.value,d.value);console.log(r),function(){const e=document.querySelector(".content"),{box:t,plusSign:n}=f();t.classList.add("clickable"),n.addEventListener("click",(function(){g(t,h())})),e.appendChild(t)}(),t.remove(),function(e,t){const n=document.createElement("h2");n.textContent=t.title;const o=document.createElement("p");o.textContent=`Description: ${t.description}`;const r=document.createElement("p");r.textContent=`Due Date: ${t.dueDate}`;const i=document.createElement("p");i.textContent=`Priority: ${t.priority}`;const a=document.createElement("p");a.textContent="Status: "+(t.checklist?"Due":"Done"),e.appendChild(n),e.appendChild(o),e.appendChild(r),e.appendChild(i),e.appendChild(a)}(e,r)})),t.appendChild(n),t.appendChild(o),t.appendChild(document.createElement("br")),t.appendChild(r),t.appendChild(i),t.appendChild(document.createElement("br")),t.appendChild(l),t.appendChild(s),t.appendChild(document.createElement("br")),t.appendChild(u),t.appendChild(d),t.appendChild(document.createElement("br")),t.appendChild(a),t.appendChild(c),t.appendChild(document.createElement("br")),t.appendChild(p),e.appendChild(t)}(e)}(()=>{console.log("Called LoadBlankProject - Creating a blank project array...");let e=[];console.log("Pushing the title name of the project to the project array...");e.push({projectTitle:"Default Project"}),console.log(e)})(),(()=>{const e=document.querySelector(".content"),{box:t,plusSign:n}=f();t.classList.add("clickable"),n.addEventListener("click",(function(){g(t,h())})),e.appendChild(t)})(),console.log(m)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,